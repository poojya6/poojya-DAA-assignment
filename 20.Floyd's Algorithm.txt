Implement Floyd's Algorithm to find the shortest path between all pairs of cities. Display the distance matrix before and after applying the algorithm. Identify and print the shortest path
Input: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2
Output: 0
a) Test cases :
B to A 2
A TO C 3
C TO D 1
D TO A 6 
C TO B 7 
Find shortest path from C to A 
Output = 7 

import numpy as np
def floyd_warshall(n,edges):
    inf = float('inf')
    dist = np.full((n,n),inf)
    np.fill_diagonal(dist,0)
    for u, v, w in edges:
        dist[u][v]=w
        dist[v][u]=w
    print("Initial distance matrix:")
    print(dist)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j]>dist[i][k]+dist[k][j]:
                    dist[i][j]=dist[i][k]+dist[k][j]
    print("Distance matrix after applying Floyd-Warshall Algorithm:")
    print(dist)
    return dist
def shortest_path(dist,start,end):
    return dist[start][end]
n=5
edges=[[0, 1, 2],[0, 4, 8],[1, 2, 3],[1, 4, 2],[2, 3, 1],[3, 4, 1]]
dist = floyd_warshall(n,edges)
print(f"Shortest path from city 2 to city 0:{shortest_path(dist,2,0)}")

output:

Initial distance matrix:
[[ 0.  2. inf. inf.  8.]
 [ 2.  0.  3. inf.  2.]
 [inf.  3.  0.  1. inf.]
 [inf. inf.  1.  0.  1.]
 [ 8.  2. inf.  1.  0.]]

Distance matrix after applying Floyd-Warshall Algorithm:
[[ 0.  2.  5.  3.  4.]
 [ 2.  0.  3.  1.  2.]
 [ 5.  3.  0.  1.  2.]
 [ 3.  1.  1.  0.  1.]
 [ 4.  2.  2.  1.  0.]]
Shortest path from city 2 to city 0:5.0
